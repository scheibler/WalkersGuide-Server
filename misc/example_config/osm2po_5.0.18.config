#   ____   _____ __  __ ___  _____   ____
#  / __ \ / ____|  \/  |__ \|  __ \ / __ \
# | |  | | (___ | \  / |  ) | |__) | |  | |
# | |  | |\___ \| |\/| | / /|  ___/| |  | |
# | |__| |____) | |  | |/ /_| |    | |__| |
#  \____/|_____/|_|  |_|____|_|     \____/  DEFAULT CONFIGURATION
#

######################################################################
#
# CONVERTER
#
######################################################################

# Known Parsers detected by file extension.
# Other files or streams will be delegated to OsmXmlParser.

osmParser.pbf = de.cm.osm2po.plugins.parser.OsmPbfParser
osmParser.o5m = de.cm.osm2po.plugins.parser.OsmO5mParser
osmParser.o5m.gz = de.cm.osm2po.plugins.parser.OsmO5mGzParser
osmParser.osm.bz2 = de.cm.osm2po.plugins.parser.OsmXmlBz2Parser

# tileSize is the most important parameter for the first conversion
# step. It controls the balance between available memory and
# data size. The rule is simple: The more memory and the larger a tile
# the better. tileSize accepts two sub-values, separated by kommas.
# The pattern is: [<Y>x<X>|x][,<buffer>]
# It defaults to tileSize=1x1,0.1 (in degrees) where Y,X are Integers and
# buffer a Float. This is a very pessimistic value and should be increased
# for larger countries. It is possible to set 7x9 e.g. but divisors of
# 90 and 180 are recommended. The buffer is needed for ways that cross tiles.
# If a way is too long and the buffer too small, it cannot be resolved and will
# be dropped. Setting tileSize=x disables tiling, which is optimal but directly
# dependent on the memory given by the -Xmx Java-Parameter.
# For most countries I recommend tileSize=x with -Xmx1408m.
# Since Version 5.0.2 the additional sub-value 'c' is not supported anymore
# and is set by default.

#tileSize = 1x1,0.1
tileSize = x

# A too small tileSize (size and/or buffer) ignores ways which are
# tagged as one long section. In order to catch these, either increase
# the tileSize values (recommended) or use the following option (slow).
# Tip: Read the Log while and/or after conversion,
# osm2po will report a warn message in such a case. 

#rescueOrphanedWays = true

# osm2po's Joiner/TileManager must be able to cache lots of
# tiles (nodes). Therefore it has to estimate the remaining ram.
# If osm2po runs into OutOfMemoryErrors here, which mostly happens
# under 64 Bit Java, increase osm2po's own reservedXmx parameter (in Mb).

#reservedXmx = 512
reservedXmx = 2048

# Skip regions with too few nodes (faster but less accurate). Default is 0.

tileThreshold = 100

# If tiling is enabled, caching as many tiles as possible per pass 
# is the fastest strategy. In some cases, mostly if these tiles contain hardly
# any nodes, this optimization may cause the opposite effect.

maxTilesPerLoop = 100

# Very useful but slow postprocess of the segmenter which renumbers
# vertexIDs by their location.
  
#useQuadTileOrder = true

# In the first conversion step osm2po usually writes nodes to a temp file,
# collects NodeIds referenced by ways and relations and filters them after.
# Ways will also be pre-filtered. This behavior is memory friendly but slow
# and in few cases not wanted.

#disablePreFilter = true

# In order to ignore or modify ways programmatically the joinFilter is your
# first hook into the Java-API. It acts like a deferred antagonist of the
# disablePreFilter parameter.

#joinFilter.class = de.cm.osm2po.converter.DefaultJoinFilter

# The DefaultJoinFilter drops invalid ways (see finalMask) but bypasses
# validation if a way is referenced by a relevant relation.
# In some rare cases, it might be necessary to enrich the speed if a
# way has not been declared above. It defaults to 1 kmh.

#joinFilter.defaultSpeed = 50

# The DefaultJoinFilter also supports clipping of regions.
# Two LatLon-Pairs denote a rectangle, more than two a polygon.
# Multiple clippings can be separated by semicolons.
 
#joinFilter.boundings = 53.5,10.0,53.6,10.1,53.5,10.1,53.5,10.0

# If you prefer LonLat-Order set
#joinFilter.boundings.longitudeFirst = true

# If your coordinates come from a file, set sth. like this
#myPoly = @[path/to/poly.file]
#joinFilter.boundings = @[myPoly]; @[anotherPoly]; ...; 53.5,10.0...

######################################################################
#
# WAY TAG RESOLVER
#
######################################################################

# A TagResolver transforms OSM-tags to a simple and flat representation
# containing name, speed, usage, ..., etc. If you need a special behavior,
# which cannot be handled by this default mechanism, feel free to implement
# your own TagResolver. Three attributes exist for this purpose:
# The clazz (byte 1-127) denotes the anchor/main-type. The second one are the
# flags (Integer32). Each parsed tag can indicate its existence in one Bit.
# These bits must be declared in the flagList before.
# The third attribute is meta, which can only be set programmatically.

#wayTagResolver.class = de.cm.osm2po.converter.DefaultWayTagResolver

# Using a prefix allows us to hold different configurations in one file
#wayTagResolver.prefix = wtr

# Custom flags with ascending binary values 1, 2, 4, 8 ...
# You can define up to 32 Flags (Bits).

wtr.flagList = foot, footallowed, footdenied, gradeoneortwo, gradethreetofive, hardsurface, softsurface, goodsmoothness, badsmoothness, hasname, isarea, accessno, car, bike, rail, ferry

# only convert ways containing one of these flags

wtr.finalMask = foot

# very special hint for level_crossing modification

wtr.shuttleTrainMask = rail|car

# osm2po needs to know the anchor-tag and some default values if not tagged.
# To prevent ambiguities configure a well chosen priority.
# Main-Tag definitions. Params 1-4:
# 1) priority
# 2) class (1-127)
# 3) self classified road type
#   1 = big / unknown streets: primary, primary link, secondary, secondary link, road
#   2 = small streets: tertiary, tertiary_link, unclassified, residential, living_street, service with name
#   3 = paved way: cycleway (foot allowed), footway, path and track
#       with tracktype grade1 or grade2 or hard surface or good smoothness, pedestrian, other services
#   4 = unpaved way: cycleway (foot allowed), service, footway, path and track
#       with tracktype grade3,4,5  or soft surface or bad smoothness
#   5 = unclassified way: all other footways, paths and tracks, cycleway (foot allowed)
#   6 = steps: steps
#   7 = impassable ways: railway.rail, railway.tram, cycleways without foot=yes tag and all other ways with foot=no
# 4) allowed transportation type (optional) - since v4.5.30
#   1    = foot (got all)
#   2    = foot_allowed
#   4    = foot_denied
#   8    = grade 1 or 2
#   16   = grade 3, 4 or 5
#   32   = hard surface
#   64   = soft surface
#   128  = good smoothness
#   256  = bad smoothness
#   512  = hasname
#   1024 = isarea
#   2048 = accessno

# allowed road types
# Bundesstraße
wtr.tag.highway.primary =        1, 1, 1,  foot
# Zubringer auf Bundesstraße
wtr.tag.highway.primary_link =   1, 2, 1,  foot
# alle unbekannten straßen
wtr.tag.highway.road =           1, 3, 1,  foot
# gut ausgebaute Landstraße mit Mittelstreifen
wtr.tag.highway.secondary =      1, 4, 1,  foot
# Landstraßenzubringer
wtr.tag.highway.secondary_link = 1, 5, 1,  foot
# Nebenstraße
wtr.tag.highway.tertiary =       1, 6, 2,  foot
# Nebenstraßenzubringer
wtr.tag.highway.tertiary_link =  1, 7, 2,  foot
# noch kleinere Nebenstraße
wtr.tag.highway.unclassified =   1, 8, 2, foot
# Straße in Wohngebieten
wtr.tag.highway.residential =    1, 9, 2,  foot
# Spiel / Wohnstraße
wtr.tag.highway.living_street = 1, 10, 2,   foot
# Fußgängerzone
wtr.tag.highway.pedestrian =    1, 11, 3,  foot
# Privatstraßen
wtr.tag.highway.service =       1, 12, 3,   foot
# Feld - oder Waldweg
wtr.tag.highway.track =         1, 13, 5, foot
# Pfad, Wanderweg
wtr.tag.highway.path =          1, 14, 5, foot
# Fußweg
wtr.tag.highway.footway =       1, 15, 5,   foot
# Treppen
wtr.tag.highway.steps =         1, 16, 6,   foot
# fahrradwege
wtr.tag.highway.cycleway =      1, 17, 7,  foot
# zug
wtr.tag.railway.rail =          1, 18, 7,  foot
# straßenbahn
wtr.tag.railway.tram =          1, 19, 7,  foot

# additional tags
wtr.allow.name = hasname
wtr.allow.area.yes = isarea
wtr.allow.access.no = accessno

# trackgrade
wtr.allow.tracktype.grade[1|2] = gradeoneortwo
wtr.allow.tracktype.grade[3|4|5] = gradethreetofive

# surface
hard_pattern = surface/(asphalt|cobblestone|concrete|metal|paved|paving_stones|sett|wood).*
wtr.allow.@hard_pattern = hardsurface
soft_pattern = surface/(compacted|dirt|earth|fine_gravel|grass|gravel|ground|mud|pebblestone|sand|stones|unpaved|woodchips).*
wtr.allow.@soft_pattern = softsurface

# smoothness
wtr.allow.smoothness.[excellent|good|intermediate] = goodsmoothness
wtr.allow.smoothness.[bad|very_bad|horrible|very_horrible] = badsmoothness

# allowed for pedestrians
wtr.allow.foot.[yes|permissive|designated] = footallowed
wtr.allow.footway.[yes|both|left|right] = footallowed
wtr.allow.sidewalk.[yes|both|left|right] = footallowed

# denied for pedestrians
wtr.allow.foot.[no|private] = footdenied
wtr.allow.smoothness.impassable = footdenied
wtr.allow.trail_visibility.[no|horrible] = footdenied

# not used, cause we want to create a router for walkers
# autobahn
#wtr.tag.highway.motorway =       1, 11, 120, car
# autobahn zubringer
#wtr.tag.highway.motorway_link =  1, 12, 30,  car
# autobahnähnliche Straße
#wtr.tag.highway.trunk =          1, 13, 90,  car
# Zubringer auf autobahnähnliche Straße
#wtr.tag.highway.trunk_link =     1, 14, 30,  car
#wtr.tag.route.ferry =            2, 01, 10,  ferry
#wtr.tag.route.shuttle_train =    2, 02, 50,  rail|car

# Other tags may also overwrite the default transportation type definition.
# Tags without explicit values like wtr.deny.motorcar act like
# an else-part and will be used if no other tag=value matches.
# You can also substitute keys. e.g.
# 'wtr.deny.motor[_vehicle|car]' will be replaced by
# 'wtr.deny.motor_vehicle' and 'wtr.deny.motorcar'.
# Nested expressions like ..[...[...]].. are not supported.

#wtr.allow.motor[car|_vehicle].[yes|destination] = car
#wtr.allow.[bicycle|cycleway] = bike
#wtr.allow.[footway|sidewalk] = foot

#wtr.deny.tracktype.grade[4|5] = car|bike
#wtr.deny.access.no = car|bike|foot|rail|ferry
#wtr.deny.vehicle.no = car|bike
#wtr.deny.motor[_vehicle|car] = car
#wtr.deny.bicycle.no = bike
#wtr.deny.foot.no = foot
#wtr.deny.footway.none = foot

# Allow one or more osm-tags to override the default speeds above.
# The priority increases from left to right. Meaning, if more than one tag
# exists, the last one wins. In order to disable this behavior,
# remove the following line or add a leading #. 

#wtr.maxSpeedTags = maxspeed
#wtr.maxSpeedTags = maxspeed, maxspeed:hgv


######################################################################
#
# RELATION TAG RESOLVER
#
######################################################################

#relationTagResolver.class = de.cm.osm2po.converter.DefaultRelationTagResolver

#relationTagResolver.prefix = rtr

# The DefaultRelationTagResolver can take some Relation types into account. 
# By default it only accepts Restrictions.

#rtr.supportRestrictions = false
#rtr.supportBoundaries = true
#rtr.supportPolygons = true
#rtr.supportedRouteClazzes = bus, bicycle

######################################################################
#
# NODE TAG RESOLVER
#
######################################################################

#nodeTagResolver.class = de.cm.osm2po.converter.DefaultNodeTagResolver

######################################################################
#
# LOGGER
#
######################################################################

# This is the LogLevel for global (log.level) and console (log.console.level)
# and file logging. Possible values are
# debug, progress, warn, info (default), error and fatal.

log.level = debug
log.file.level = debug
log.console.level = progress
#log.console.writer.class = de.cm.osm2po.logging.Log2poConsoleWriter
#log.console.writer.class = de.cm.osm2po.logging.LogJclWriter

# Redirecting of StandardOut (console).
# Possible values are out (default), err or null (quiet).

#log.console.to = err

######################################################################
#
# POSTPROCESSORS
#
######################################################################

postp.0.class = de.cm.osm2po.converter.PgRoutingWriter
#postp.0.writeMultiLineStrings = true

#postp.1.class = de.cm.osm2po.plugins.postp.PgVertexWriter
#postp.2.class = de.cm.osm2po.plugins.postp.PgPolyWayWriter
#postp.3.class = de.cm.osm2po.plugins.postp.PgPolyRelWriter

#postp.4.class = de.cm.osm2po.converter.MlgBuilder
#postp.4.id = 0
#postp.4.maxLevel = 3,10
#postp.5.class = de.cm.osm2po.sd.postp.SdGraphBuilder

# Pg*Writer usually create sql files. Enable the following
# parameter to redirect them to stdout (console)

#postp.pipeOut = true
 
# Tip 1:
# If you want this program to be one link in a transformation chain
# e.g. curl | bzcat | osm2po | psql
# you must set both, log.console.to=err and postp.pipeOut=true.
# It is recommended to run curl, bzcat and psql in silent/quiet mode. 
# Example (one line):
# curl -s -L http://download.geofabrik.de/europe/germany/hamburg-latest.osm.bz2 |
# bzcat -c | java -jar osm2po-core.jar prefix=hh postp.pipeOut=true log.console.to=err |
# psql -q -U myuser -s -d mydb

# Tip 2:
# For the SdGraphBuilder it is highly recommended to convert
# with useQuadTileOrder=true and activated MlgBuilder in the
# prior conversion steps.

######################################################################
#
# OSM2PO-Routing
#
######################################################################

# This pluggable class translates other properties like kmh or flags
# and allows to mix in external data programmatically.

#graph.build.interceptor.class = de.cm.osm2po.converter.DefaultGraphBuildInterceptor

# osm2po doubles segments to handle forward and reverse directions.
# Reverse edges which are derived from one-way-segments are
# written by default. This is useful for bike routing but
# not for car routing and blows up your graph.
# To exclude these "WrongWays" set the following parameter to true

#graph.build.excludeWrongWays = true

# Runtime parameters for the osm2po-Graph:
# In order to speed up geometry lookups you may want to set
# graph.support.segments=true. This disables HardDisk-Lookups but needs
# much more RAM (Xmx). Setting graph.support.edgeflags=true is useful
# for Soap/GeoJson-Requests. If not set, you will not receive street type infos.
# Setting graph.support.reverse=true creates an additional Reverse-Graph.
# graph.support.raster[.e|.v] is another RAM-consuming addition, which creates
# a rastered index for vertices (v) or edges (e) or if '.e' and '.v'
# are missing, for both. 

#graph.support.segments = true
#graph.support.edgeflags = true
#graph.support.reverse = true
#graph.support.raster = true
#graph.support.raster.e = true
#graph.support.raster.v = true
#graph.support.barriers = true
#graph.support.extensions = true

# Here are osm2po's modified Dijkstra/AStar algorithms.
# OvlRouters are not restricted to vertices (crossings) and can handle
# virtual locations at runtime.
# EdgeRouters traverse each street twice and return more accurate results
# with regards to the turn-restriction. 
# MlgRouters are fast but need preprocessed data by the MlgBuilder (see above),
# otherwise they will fall back to default behavior.
# In order to take the latter into account at runtime you must
# set graph.support.extensions = true (see above)
# The MlgBuilder defines IDs for different use cases, as there are:
# ID  0  : Default Car-Routing with TurnRestrictions.
# ID +1  : For Shortest Path (not recommended)
# ID +2  : Ignore OneWay-Restrictions
# ID +4  : Ignore Turn-Restrictions

#router.0.class=de.cm.osm2po.routing.DefaultRouter
#router.1.class=de.cm.osm2po.routing.EdgeRouter
#router.2.class=de.cm.osm2po.routing.PoiRouter
#router.3.class=de.cm.osm2po.routing.OvlRouter
#router.4.class=de.cm.osm2po.routing.OvlEdgeRouter
#router.5.class=de.cm.osm2po.routing.OvlPoiRouter
#router.6.class=de.cm.osm2po.routing.MlgRouter
#router.7.class=de.cm.osm2po.routing.MlgRevRouter
#router.8.class=de.cm.osm2po.routing.MlgBidiRouter
#router.9.class=de.cm.osm2po.routing.MlgOvlEdgeRouter

######################################################################
#
# OSM2PO-TinyWebServer (HTTP-GET/SOAP)
#
######################################################################

#service.domain = localhost
#service.port = 8888

######################################################################
#
# OSM2PO-Samples
#
######################################################################

# sample resolver and router from the plugins package which
# demonstrates how to take traffic signals into account
# and how to visualize them in the WebTestUI

#nodeClazz.1.name=TrafficSignals
#nodeTagResolver.class=de.cm.osm2po.plugins.demos.TrafficSignalsNodeTagResolver
#router.11.class=de.cm.osm2po.plugins.demos.TrafficSignalsRouter

# Since Version 5.0.0 some simple Way-, and since 5.0.10 even some complex
# Relation-Polygons are supported. Enable the following block to generate
# two tables, one for simple areas, another for complex boundaries. Important:
# Because these are not streets, the segmenter (cmd=s) is not needed.
# Call it with cmd=tzjp tileSize=x and some high -Xmx instead.

#wayTagResolver.prefix=ptr
#ptr.flagList=poly
#ptr.finalMask=poly
#ptr.tag.area.yes = 2, 100, 0, poly
#ptr.tag.building = 1, 101, 0, poly
#ptr.tag.leisure = 1, 102, 0, poly
#ptr.tag.waterway.riverbank = 1, 103, 0, poly
#postp.0.class=de.cm.osm2po.plugins.postp.PgPolyWayWriter

#rtr.supportBoundaries=true
#rtr.supportRestrictions=false
#disablePreFilter=true
#postp.1.class=de.cm.osm2po.plugins.postp.PgPolyRelWriter

